# .github/workflows/shared.yml
name: Reusable CI Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment name (development, staging, production)"
      run_e2e:
        required: false
        type: boolean
        default: false
        description: "Whether to run E2E tests"
      run_smoke_test:
        required: false
        type: boolean
        default: false
        description: "Whether to run smoke tests"
      deploy:
        required: false
        type: boolean
        default: false
        description: "Whether to deploy after successful build"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ../../client
    
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for better versioning
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: '../../client/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Cache build
        uses: actions/cache@v3
        with:
          path: |
            ../../client/node_modules/.cache
            ../../client/dist
          key: build-${{ runner.os }}-${{ hashFiles('../../client/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            build-${{ runner.os }}-${{ hashFiles('../../client/package-lock.json') }}-
      
      - name: Lint
        run: npm run lint
        
      - name: Type Check
        run: npm run type-check
        
      - name: Unit Tests
        run: npm test -- --ci --coverage

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage-${{ inputs.environment }}
          path: ../../client/coverage
          
      - name: Build
        run: npm run build
        env:
          NODE_ENV: ${{ inputs.environment }}
      
      - name: Run Smoke Tests
        if: inputs.run_smoke_test
        run: npm run smoke-test
      
      - name: Run E2E Tests
        if: inputs.run_e2e
        run: npm run e2e
        
      - name: Security Scan - npm audit
        run: npm audit --audit-level=high
        continue-on-error: ${{ inputs.environment != 'production' }}
          
      - name: Extract Version
        id: extract-version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ../../client/
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
          
      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ../../client
          file: ../../client/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-${{ inputs.environment }}:${{ needs.build-and-test.outputs.version }}
            ghcr.io/${{ github.repository }}-${{ inputs.environment }}:${{ github.sha }}
            ${{ inputs.environment == 'production' && format('ghcr.io/{0}-{1}:latest', github.repository, inputs.environment) || '' }}
          build-args: |
            NODE_ENV=${{ inputs.environment }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          labels: |
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.version=${{ needs.build-and-test.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
          
      # This step replaces the buildx cache to prevent it from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
  deploy:
    if: inputs.deploy
    needs: [build-and-test, docker-build]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency: 
      group: deploy-${{ inputs.environment }}
      cancel-in-progress: false
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Deploy to Environment
        run: |
          # Here you would add your actual deployment logic
          
          if [ "${{ inputs.environment }}" == "production" ]; then
            echo "Deploying to production environment"
            # Add your production deployment commands
            # Example: kubectl apply -f k8s/production/
          elif [ "${{ inputs.environment }}" == "staging" ]; then
            echo "Deploying to staging environment"
            # Add your staging deployment commands
            # Example: kubectl apply -f k8s/staging/  
          else
            echo "Deploying to development environment"
            # Add your development deployment commands
            # Example: kubectl apply -f k8s/development/
          fi
          
      - name: Create Deployment Tag
        if: ${{ inputs.environment == 'production' }}
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git tag -a "deploy-${{ inputs.environment }}-v${{ needs.build-and-test.outputs.version }}" -m "Deployed ${{ inputs.environment }} version ${{ needs.build-and-test.outputs.version }}"
          git push origin "deploy-${{ inputs.environment }}-v${{ needs.build-and-test.outputs.version }}"
